- **双指针**
```java
class Solution {
    public int removeElement(int[] nums, int val) {
        int j = nums.length - 1;
        for (int i = 0; i <= j; i++) {
            if (nums[i] == val) {
                swap(nums, i--, j--);
            }
        }
        return j + 1;
    }
    void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
```

- **保留逻辑**
```java
class Solution {
    public int removeElement(int[] nums, int val) {
        int idx = 0;
        for (int x : nums) {
            if (x != val) nums[idx++] = x;
        }
        return idx;
    }
}
```
【删除有序数组中的重复项】

- 保留逻辑，这也是双指针。
```java
class Solution {
    public int removeDuplicates(int[] nums) {
        // 1 2 2 3 3 3 4
        int idx = 0;
        for( int i = 1; i < nums.length-1; i++){
            if(nums[i] != nums[i-1]{
                nums[idx++] = nums[i];
            }
        }
        return 
    }
}
```

- 最多保留k位。
```java
class Solution {
    int k = 1;
    public int removeDuplicates(int[] nums) {
        return process(nums,k);
    }
    public int process(int[] nums,int k){
        int idx = 0;
        for(int x : nums){
            if(idx < k || nums[x] != nums[idx-k]) nums[idx++]= x;
        }
        return idx;
    }
}
```
基于上述解法我们还能做一点小剪枝：利用目标数组的最后一个元素必然与原数组的最后一个元素相同进行剪枝，从而确保当数组有超过 k 个最大值时，数组不会被完整扫描。
但需要注意这种「剪枝」同时会让我们单次循环的常数变大，所以仅作为简单拓展。
```java
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if (n <= 1) return n;   
        return process(nums, 1, nums[n - 1]);
    }
    int process(int[] nums, int k, int max) {
        int idx = 0; 
        for (int x : nums) {
            if (idx < k || nums[idx - k] != x) nums[idx++] = x;
            if (idx - k >= 0 && nums[idx - k] == max) break;
        }
        return idx;
    }
}
```
【改进】
```java
if (idx - k >= 0 && nums[idx - k] == max) break;
```
【最多保留k位，调整了idx=k，找到一个易错bug】
```java
class Solution {
    public int removeDuplicates(int[] nums) {
        return process(nums,2);
    }
    public int process(int[] nums,int k){
        int idx = k;

        for(int i = k; i < nums.length; i++){
            if(nums[i] != nums[idx-k]) nums[idx++] = nums[i]; //这里不能用i，会因保留逻辑而错误
        }
        return idx;
    }
}
```